##### Gather the available zones from the regions
- name: 01.01 Get all the zones
  tags:
    - basic
    - zones
  gcp_zones_info:
    region:               'asia-northeast1'
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    scopes:               "{{ scopes               }}"
  register: zones

- name: 02.02 Set the zones as facts
  tags:
    - basic
    - zones
  set_fact:
    zones: "{{ zones.resources }}"

##### Setup the network and firewall
- name: 03.01 create the subnets
  tags:
    - subnets
    - basic
  gcp_compute_network:
    name: network-dmm
    project:                 "{{ project              }}"
    auth_kind:               "{{ auth_kind            }}"
    auto_create_subnetworks: 'true'
    service_account_file:    "{{ service_account_file }}"
    state: present
  register: network

- name: 03.02 create a firewall
  tags:
    - subnets
  gcp_compute_firewall:
    name: network-dmm
    network:           "{{ network }}"
    allowed:
    - ip_protocol: tcp
      ports:
      - '0-65535'
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    state:                present

##### Workstation nodes
- name: 04.01  Allocate the gateway for workstation
  tags:
    - basic
    - gateway
  gcp_compute_address:
    state:                present
    name:                 'gw-dmm-ws'
    region:               'asia-northeast1'
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    scopes:               "{{ scopes               }}"
  register: ipaddr

- name: 04.02 Create the disk for workstation 
  tags:
    - workstation
  gcp_compute_disk:
    name:                 disk-dmm-ws
    source_image:         projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts
    size_gb:              100
    zone:                 'asia-northeast1-a'
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    state:                present
  register: disk_dmm_ws

  #- name: 04.03 Print the disk for workstation
  #  tags:
  #    - workstation
  #  debug:
  #    var=disk_dmm_ws

- name: 04.03 Create the workstation instance
  tags:
    - workstation
  gcp_compute_instance:
    name:          ins-dmm-ws
    machine_type:  n1-standard-8
    disks:
    - auto_delete: 'true'
      boot:        'true'
      source:      "{{ disk_dmm_ws }}"
    - auto_delete: 'true'
      interface:   NVME
      type:        SCRATCH
      initialize_params:
        disk_type: local-ssd
    metadata:
      startup-script-url: gs:://graphite-playground/bootstrap.sh
      cost-center: '12345'
    labels:
      environment: dmm
      component:   workstation
    network_interfaces:
    - network:            "{{ network              }}"
      access_configs:
      - name: External NAT
        nat_ip:           "{{ ipaddr               }}"
        type:             ONE_TO_ONE_NAT
    zone:                 'asia-northeast1-a'
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    state: present

##### Prepare the pds nodes
- name: 05.01 Create the disk for pds
  tags:
    - pd
  gcp_compute_disk:
    name:                 "disk-dmm-pd-{{ item.0 }}"
    source_image:         projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts
    size_gb:              20
    zone:                 "{{ item.1 }}"
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    state:                present
    labels:
      component:          "pd"
  with_indexed_items: "{{ zones }}"
  register: disk_dmm_pd

- name: 05.02 Create the pd instance
  tags:
    - pd
  gcp_compute_instance:
    name:          "ins-dmm-pd-{{ item.0 }}"
    machine_type:  n1-standard-4
    disks:
    - auto_delete: 'true'
      boot:        'true'
      source:      "{{ item.1 }}"
    - auto_delete: 'true'
      interface:   NVME
      type:        SCRATCH
      initialize_params:
        disk_type: local-ssd
    metadata:
      startup-script-url: gs:://graphite-playground/bootstrap.sh
      cost-center: '12345'
    labels:
      environment: dmm
      component:   pd
    network_interfaces:
    - network:            "{{ network              }}"
    zone:                 "{{ item.1.item[1]       }}"
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    state: present
  with_indexed_items: "{{ disk_dmm_pd.results }}"

- name: 05.03 Get all the nodes and prepare the instance group 
  tags:
    - pd
  gcp_zones_compute_instance_info:
    filters:
    - labels.component = pd
    region:               'asia-northeast1'
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    scopes:               "{{ scopes               }}"
  register: pdInstances

- name: 05.04 Prepare the health check
  tags:
    - pd
  gcp_compute_health_check:
    name: checkpdstatus
    type: TCP
    tcp_health_check:
      port: 4000
      request: ping
      response: pong
    healthy_threshold: 10
    timeout_sec: 2
    unhealthy_threshold: 5
    project:              "{{ project                       }}"
    auth_kind:            "{{ auth_kind                     }}"
    service_account_file: "{{ service_account_file          }}"
    state: present
  register: pdhealthcheck

- name: 05.05 Create target pool from the instances
  tags:
    - pd
  gcp_compute_target_pool:
    name: pdtargetpool
    instances:            "{{ [ pdInstances['resources'] | first ] }}"
    #health_check:         "{{ healthcheck                }}"
    region:               'asia-northeast1'
    project:              "{{ project                    }}"
    auth_kind:            "{{ auth_kind                  }}"
    service_account_file: "{{ service_account_file       }}"
    state: present
  register: pdtargetpool

- name: 05.06 Allocate the gateway
  tags:
    - pd
  gcp_compute_address:
    state:                present
    name:                 'pd-gateway'
    region:               'asia-northeast1'
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    scopes:               "{{ scopes               }}"
  register: pdGateway

- name: 05.06 create a forwarding rule from ip addr to target pool
  tags:
    - pd
  gcp_compute_forwarding_rule:
    name:                 dmmpdgateway
    region:               'asia-northeast1'
    target:               "{{ pdtargetpool         }}"
    ip_protocol:          TCP
    port_range:           2379-2379
    ip_address:           "{{ pdGateway.address    }}"
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    state:                present

##### Prepare the kvs nodes
- name: 06.01 Create the disk for kvs
  tags:
    - kv
  gcp_compute_disk:
    name:                 "disk-dmm-kv-{{ item.0 }}"
    source_image:         projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts
    size_gb:              100
    zone:                 "{{ item.1 }}"
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    state:                present
    labels:
      component:          "kv"
  with_indexed_items: "{{ zones }}"
  register: disk_dmm_kv

- name: 06.02 Create the kv instance
  tags:
    - kv
  gcp_compute_instance:
    name:          "ins-dmm-kv-{{ item.0 }}"
    machine_type:  n1-standard-8
    disks:
    - auto_delete: 'true'
      boot:        'true'
      source:      "{{ item.1 }}"
    - auto_delete: 'true'
      interface:   NVME
      type:        SCRATCH
      initialize_params:
        disk_type: local-ssd
    metadata:
      startup-script-url: gs:://graphite-playground/bootstrap.sh
      cost-center: '12345'
    labels:
      environment: dmm
      component:   kv
    network_interfaces:
    - network:            "{{ network              }}"
    zone:                 "{{ item.1.item[1]       }}"
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    state: present
  with_indexed_items: "{{ disk_dmm_kv.results }}"

- name: 06.03 Create the disk for kvs's scale out
  tags:
    - kv
  gcp_compute_disk:
    name:                 "disk-dmm-kv-scale-{{ item.0 }}"
    source_image:         projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts
    size_gb:              100
    zone:                 "{{ item.1 }}"
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    state:                present
    labels:
      component:          "scale-kv"
  with_indexed_items: "{{ zones }}"
  register: disk_dmm_kv_scale

- name: 06.04 Create the kv instance for scale out
  tags:
    - kv
  gcp_compute_instance:
    name:          "ins-dmm-kv-scale-{{ item.0 }}"
    machine_type:  n1-standard-8
    disks:
    - auto_delete: 'true'
      boot:        'true'
      source:      "{{ item.1 }}"
    - auto_delete: 'true'
      interface:   NVME
      type:        SCRATCH
      initialize_params:
        disk_type: local-ssd
    metadata:
      startup-script-url: gs:://graphite-playground/bootstrap.sh
      cost-center: '12345'
    labels:
      environment: dmm
      component:          "scale-kv"
    network_interfaces:
    - network:            "{{ network              }}"
    zone:                 "{{ item.1.item[1]       }}"
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    state: present
  with_indexed_items: "{{ disk_dmm_kv_scale.results }}"

##### Prepare the tidb nodes
- name: 07.01 Create the disk for tidbs
  tags:
    - tidb
  gcp_compute_disk:
    name:                 "disk-dmm-tidb-{{ item.0 }}"
    source_image:         projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts
    size_gb:              20
    zone:                 "{{ item.1 }}"
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    state:                present
    labels:
      component:          "tidb"
  with_indexed_items: "{{ zones }}"
  register: disk_dmm_tidb

- name: 07.02 Create the tidb instance
  tags:
    - tidb
  gcp_compute_instance:
    name:          "ins-dmm-tidb-{{ item.0 }}"
    machine_type:  n1-standard-8
    disks:
    - auto_delete: 'true'
      boot:        'true'
      source:      "{{ item.1 }}"
    - auto_delete: 'true'
      interface:   NVME
      type:        SCRATCH
      initialize_params:
        disk_type: local-ssd
    metadata:
      startup-script-url: gs:://graphite-playground/bootstrap.sh
      cost-center: '12345'
    labels:
      environment: dmm
      component:   tidb
    network_interfaces:
    - network:            "{{ network              }}"
    zone:                 "{{ item.1.item[1]       }}"
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    state: present
  with_indexed_items: "{{ disk_dmm_tidb.results }}"

- name: 07.03 Get all the nodes and prepare the instance group 
  tags:
    - tidb
  gcp_zones_compute_instance_info:
    filters:
    - labels.component = tidb
    region:               'asia-northeast1'
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    scopes:               "{{ scopes               }}"
  register: tidbInstances

- name: 07.04 Prepare the health check
  tags:
    - tidb
  gcp_compute_health_check:
    name: checktidbstatus
    type: TCP
    tcp_health_check:
      port: 4000
      request: ping
      response: pong
    healthy_threshold: 10
    timeout_sec: 2
    unhealthy_threshold: 5
    project:              "{{ project                       }}"
    auth_kind:            "{{ auth_kind                     }}"
    service_account_file: "{{ service_account_file          }}"
    state: present
  register: healthcheck

- name: 07.05 Create target pool from the instances
  tags:
    - tidb
  gcp_compute_target_pool:
    name: tidbtargetpool
    instances:            "{{ tidbInstances['resources'] }}"
    #health_check:         "{{ healthcheck                }}"
    region:               'asia-northeast1'
    project:              "{{ project                    }}"
    auth_kind:            "{{ auth_kind                  }}"
    service_account_file: "{{ service_account_file       }}"
    state: present
  register: targetpool

- name: 07.06 Allocate the gateway
  tags:
    - tidb
  gcp_compute_address:
    state:                present
    name:                 'tidb-gateway'
    region:               'asia-northeast1'
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    scopes:               "{{ scopes               }}"
  register: tidbGateway

- name: 07.06 create a forwarding rule from ip addr to target pool
  tags:
    - tidb
  gcp_compute_forwarding_rule:
    name:                 dmmgateway
    region:               'asia-northeast1'
    target:               "{{ targetpool           }}"
    ip_protocol:          TCP
    port_range:           4000-4000
    ip_address:           "{{ tidbGateway.address  }}"
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    state:                present

- name: 07.07 Create the disk for tidbs's scale out
  tags:
    - tidb
  gcp_compute_disk:
    name:                 "disk-dmm-tidb-scale-{{ item.0 }}"
    source_image:         projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts
    size_gb:              20
    zone:                 "{{ item.1               }}"
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    state:                present
    labels:
      component:          "scale-tidb"
  with_indexed_items: "{{ zones }}"
  register: disk_dmm_tidb_scale

- name: 07.08 Create the tidb instance's scale out
  tags:
    - tidb
  gcp_compute_instance:
    name:          "ins-dmm-tidb-scale-{{ item.0 }}"
    machine_type:  n1-standard-8
    disks:
    - auto_delete: 'true'
      boot:        'true'
      source:      "{{ item.1 }}"
    - auto_delete: 'true'
      interface:   NVME
      type:        SCRATCH
      initialize_params:
        disk_type: local-ssd
    metadata:
      startup-script-url: gs:://graphite-playground/bootstrap.sh
      cost-center: '12345'
    labels:
      environment: dmm
      component:   scale-tidb
    network_interfaces:
    - network:            "{{ network              }}"
    zone:                 "{{ item.1.item[1]       }}"
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    state: present
  with_indexed_items: "{{ disk_dmm_tidb_scale.results }}"

##### Create the nodes for dm
- name: 08.01 Create the disk for dm
  tags:
    - dm
  gcp_compute_disk:
    name:                 "disk-dmm-dm-{{ item.0 }}"
    source_image:         projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts
    size_gb:              20
    zone:                 "{{ item.1 }}"
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    state:                present
    labels:
      component:          "dm"
  with_indexed_items: "{{ zones }}"
  register: disk_dmm_dm

- name: 08.02 Create the tidb instance
  tags:
    - dm
  gcp_compute_instance:
    name:          "ins-dmm-dm-{{ item.0 }}"
    machine_type:  n1-standard-1
    disks:
    - auto_delete: 'true'
      boot:        'true'
      source:      "{{ item.1 }}"
    - auto_delete: 'true'
      interface:   NVME
      type:        SCRATCH
      initialize_params:
        disk_type: local-ssd
    metadata:
      startup-script-url: gs:://graphite-playground/bootstrap.sh
      cost-center: '12345'
    labels:
      environment: dmm
      component:   dm
    network_interfaces:
    - network:            "{{ network              }}"
    zone:                 "{{ item.1.item[1]       }}"
    project:              "{{ project              }}"
    auth_kind:            "{{ auth_kind            }}"
    service_account_file: "{{ service_account_file }}"
    state:                present
  with_indexed_items: "{{ disk_dmm_dm.results }}"

